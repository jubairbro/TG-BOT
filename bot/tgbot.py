# Save this code in your python file: /root/bot/tgbot.py
# The Final, Polished, and Fully-Featured Version

import telebot
import psutil
import subprocess
import os
import time
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from functools import wraps

# ============== ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ==============
BOT_TOKEN = "your_bot_token"
ADMIN_IDS = [00001726262,18363637373,52820202373773] # Admin ids
GROUP_ID = -1002758027133 # ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржПржмржВ /mentionall ржПрж░ ржЬржирзНржп ржЧрзНрж░рзБржкрзЗрж░ ржЖржЗржбрж┐
DB_FILE = "/root/bot/commands.db" # ржнрж┐ржбрж┐ржУ ржХржорж╛ржирзНржб рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржбрзЗржЯрж╛ржмрзЗрж╕
# =========================================

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')

# ============== ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕рзЗржЯржЖржк ==============
def init_db():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS saved_commands (
            command TEXT PRIMARY KEY,
            file_id TEXT,
            caption TEXT,
            file_type TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_command(command, file_id, caption, file_type):
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("REPLACE INTO saved_commands (command, file_id, caption, file_type) VALUES (?, ?, ?, ?)", (command.lower(), file_id, caption, file_type))
    conn.commit()
    conn.close()

def get_command(command):
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT file_id, caption, file_type FROM saved_commands WHERE command = ?", (command.lower(),))
    data = cursor.fetchone()
    conn.close()
    return data

def delete_command_from_db(command):
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM saved_commands WHERE command = ?", (command.lower(),))
    conn.commit()
    conn.close()

def get_all_commands():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT command FROM saved_commands ORDER BY command ASC")
    commands = cursor.fetchall()
    conn.close()
    return commands

# ============== рж╣рзЗрж▓рзНржкрж╛рж░ ржПржмржВ ржкрж╛рж░ржорж┐рж╢ржи ржлрж╛ржВрж╢ржи ==============
def admin_required(func):
    @wraps(func)
    def wrapper(message_or_call):
        user_id = message_or_call.from_user.id
        # ржХрж▓ржмрзНржпрж╛ржХ ржХрзЛржпрж╝рзЗрж░рж┐ ржмрж╛ ржорзЗрж╕рзЗржЬ ржерзЗржХрзЗ ржЪрзНржпрж╛ржЯ ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рж╛
        chat_id = message_or_call.message.chat.id if isinstance(message_or_call, telebot.types.CallbackQuery) else message_or_call.chat.id

        # ржкрзНрж░ржзрж╛ржи ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржп рж╕рж░рж╛рж╕рж░рж┐ ржЕржирзБржорждрж┐
        if user_id in ADMIN_IDS:
            return func(message_or_call)

        # ржЧрзНрж░рзБржкрзЗ ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░рж╛
        if chat_id < 0: # ржЧрзНрж░рзБржк ржмрж╛ рж╕рзБржкрж╛рж░ржЧрзНрж░рзБржк
            try:
                chat_member = bot.get_chat_member(chat_id, user_id)
                if chat_member.status in ['administrator', 'creator']:
                    return func(message_or_call)
            except Exception as e:
                print(f"ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзЗржХ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

        # ржпржжрж┐ ржХрзЛржирзЛ рж╢рж░рзНрждржЗ ржкрзВрж░ржг ржирж╛ рж╣ржпрж╝
        if isinstance(message_or_call, telebot.types.CallbackQuery):
            bot.answer_callback_query(message_or_call.id, "тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржирж░рж╛ ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред", show_alert=True)
        else:
            bot.reply_to(message_or_call, "тЭМ ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
        return
    return wrapper

def get_ip_address():
    try:
        return subprocess.check_output(['curl', '-s', 'ipinfo.io/ip'], text=True).strip()
    except Exception:
        return "N/A"

def get_domain():
    domain_file_path = "/etc/xray/domain"
    if os.path.exists(domain_file_path):
        try:
            with open(domain_file_path, 'r') as f:
                return f.read().strip()
        except Exception:
            return "N/A"
    return "Not Set"

# ============== ржХрзАржмрзЛрж░рзНржб ржорж╛рж░рзНржХржЖржк ==============
def generate_main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton('ЁЯУК рж░рж┐ржкрзЛрж░рзНржЯ'), KeyboardButton('ЁЯФЛ рж╕рж╛рж░рзНржнрж╛рж░ рж▓рзЛржб '),
        KeyboardButton('ЁЯУЛ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕'), KeyboardButton('ЁЯУЬ ржирж┐рзЯржорж╛ржмрж▓рзА'),
        KeyboardButton('ЁЯФМ ржкрзЛрж░рзНржЯ ржЗржиржлрзЛ '), KeyboardButton('тЭУ рж╕рж╛рж╣рж╛ржпрзНржп')
    )
    return markup

def confirm_reboot_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("тЬЕ рж╣рзНржпрж╛ржБ, рж░рж┐ржмрзБржЯ ржХрж░рзБржи", callback_data="confirm_reboot"),
        InlineKeyboardButton("тЭМ ржирж╛, ржмрж╛рждрж┐рж▓", callback_data="cancel_action")
    )
    return markup

# ============== рж╕рж╛ржзрж╛рж░ржг ржХржорж╛ржирзНржб ржУ ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ==============
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"<b>рж╕рзНржмрж╛ржЧрждржо, {message.from_user.full_name}!</b>\nржЖржорж┐ ржЖржкржирж╛ржжрзЗрж░ рж╕рж╛рж░рзНржнрж╛рж░ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржмржЯред ЁЯдЦ\n <b>ЁЯдЦ Bot by : @JubairFF</b>", reply_markup=generate_main_keyboard())

@bot.message_handler(commands=['help'])
def send_help(message):
    is_admin = False
    try:
        is_admin = message.from_user.id in ADMIN_IDS or (message.chat.id < 0 and bot.get_chat_member(message.chat.id, message.from_user.id).status in ['administrator', 'creator'])
    except:
        is_admin = message.from_user.id in ADMIN_IDS

    if is_admin:
        admin_help_text = """<pre>тФМтФА ЁЯЫая╕П ржЕрзНржпрж╛ржбржорж┐ржи рж╣рзНржпрж╛рж▓рзНржк ржорзЗржирзНржпрзБ
тФВ
тФЬтФАтХ╝ ЁЯТ╛ ржХржиржЯрзЗржирзНржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ
тФВ  тФЬтФА /save [ржирж╛ржо] (рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рзЯрзЗ)
тФВ  тФВ  тФФтФА ржнрж┐ржбрж┐ржУ/ржлрж╛ржЗрж▓ рж╕рзЗржн ржХрж░рзЗред
тФВ  тФЬтФА /listcmd
тФВ  тФВ  тФФтФА рж╕ржХрж▓ рж╕рзЗржн ржХрж░рж╛ ржХржорж╛ржирзНржбрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ред
тФВ  тФФтФА /delcmd [ржирж╛ржо]
тФВ     тФФтФА рж╕рзЗржн ржХрж░рж╛ ржХржорж╛ржирзНржб ржорзБржЫрзЗ ржлрзЗрж▓рзЗред
тФВ
тФФтФАтХ╝ тЪЩя╕П рж╕рж╛рж░рзНржнрж╛рж░ ржУ ржЧрзНрж░рзБржк ржЯрзБрж▓рж╕
   тФЬтФА /reboot  : рж╕рж╛рж░рзНржнрж╛рж░ рж░рж┐ржмрзБржЯ ржХрж░рзЗред
   тФЬтФА /mentionall [ржмрж╛рж░рзНрждрж╛]
   тФВ  тФФтФА ржЧрзНрж░рзБржкрзЗ рж╕ржмрж╛ржЗржХрзЗ ржШрзЛрж╖ржгрж╛ ржжрзЗрзЯред
   тФФтФА /run [cmd] : ржЯрж╛рж░рзНржорж┐ржирж╛рж▓ ржХржорж╛ржирзНржб ржЪрж╛рж▓рж╛рзЯред

тФМтФА ЁЯдЦ рж╕рж╛ржзрж╛рж░ржг ржЗржЙржЬрж╛рж░ рж╣рзНржпрж╛рж▓рзНржк ржорзЗржирзНржпрзБ тФАтФАтХ╝
тФВ
тФЬтФАтХ╝ тЪЩя╕П рж╕рж╛рж░рзНржнрж╛рж░ рждржерзНржп
тФВ  тФЬтФА /report : рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж░рж┐ржкрзЛрж░рзНржЯред
тФВ  тФЬтФА /health : рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рзАржХрзНрж╖рж╛ред
тФВ  тФЬтФА /status : ржЪрж▓ржорж╛ржи рж╕рж╛рж░рзНржнрж┐рж╕ржЧрзБрж▓рзЛрж░ ржЕржмрж╕рзНржерж╛ред
тФВ  тФЬтФА /ports  : ржкрзЛрж░рзНржЯ рждрж╛рж▓рж┐ржХрж╛ред
тФВ  тФФтФА /rules  : ржирж┐ржпрж╝ржорж╛ржмрж▓рзАред
тФВ
тФФтФАтХ╝ </pre>"""
        bot.reply_to(message, admin_help_text)
    else:
        user_help_text = """<pre>тФМтФА ЁЯдЦ рж╕рж╛ржзрж╛рж░ржг рж╣рзНржпрж╛рж▓рзНржк ржорзЗржирзНржпрзБ
тФВ
тФЬтФАтХ╝ тЪЩя╕П рж╕рж╛рж░рзНржнрж╛рж░ рждржерзНржп
тФВ  тФЬтФА /report : рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж░рж┐ржкрзЛрж░рзНржЯред
тФВ  тФЬтФА /health : рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рзАржХрзНрж╖рж╛ред
тФВ  тФЬтФА /status : ржЪрж▓ржорж╛ржи рж╕рж╛рж░рзНржнрж┐рж╕ржЧрзБрж▓рзЛрж░ ржЕржмрж╕рзНржерж╛ред
тФВ  тФЬтФА /ports  : ржкрзЛрж░рзНржЯ рждрж╛рж▓рж┐ржХрж╛ред
тФВ  тФФтФА /rules  : ржирж┐ржпрж╝ржорж╛ржмрж▓рзАред
тФВ
тФФтФАтХ╝ </pre>
<b>Bot by : @JubairFF</b>"""
        bot.reply_to(message, user_help_text)

@bot.message_handler(regexp="^(тЭУ рж╕рж╛рж╣рж╛ржпрзНржп)$")
def send_help_from_keyboard(message):
    send_help(message)

@bot.message_handler(regexp="^(ЁЯУК рж░рж┐ржкрзЛрж░рзНржЯ|/report)$")
def send_report(message):
    try:
        cpu_usage, cpu_cores = psutil.cpu_percent(interval=1), psutil.cpu_count(logical=True)
        mem = psutil.virtual_memory()
        total_ram_gb, used_ram_gb, ram_percent = mem.total / (1024**3), mem.used / (1024**3), mem.percent
        uptime_seconds = time.time() - psutil.boot_time()
        d, rem = divmod(uptime_seconds, 86400); h, rem = divmod(rem, 3600); m, _ = divmod(rem, 60)
        uptime = f"{int(d)} ржжрж┐ржи,{int(h)} ржШржгрзНржЯрж╛,{int(m)} ржорж┐ржирж┐ржЯ"
        ip_address, domain = get_ip_address(), get_domain()

        report_text = f"""ЁЯУК <b>ржмрж░рзНрждржорж╛ржи рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж░рж┐ржкрзЛрж░рзНржЯ</b> ЁЯУК

<pre>тХнтФАCPU Information
тФВ  Cores: {cpu_cores}
тФВ  Usage: {cpu_usage:.1f}%
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>
<pre>тХнтФАRAM Information
тФВ  Total: {total_ram_gb:.2f} GB
тФВ  Used: {used_ram_gb:.2f} GB ({ram_percent:.1f}%)
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>
<pre>тХнтФАNetwork & System
тФВ  System Uptime:{uptime}
тФВ  IP Address:{ip_address}
тФВ  Domain:{domain}
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>

тЬЕ рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзНржЯрзНржпрж╛ржмрж▓ ржПржмржВ рж╕ржХрзНрж░рж┐ржпрж╝ ржЖржЫрзЗред"""
        bot.reply_to(message, report_text)
    except Exception as e:
        bot.reply_to(message, f"тЭМ рж░рж┐ржкрзЛрж░рзНржЯ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: <code>{e}</code>")

@bot.message_handler(regexp="^(ЁЯФЛ рж╕рж╛рж░рзНржнрж╛рж░ рж▓рзЛржб|/health)$")
def server_health(message):
    cpu, ram, disk = psutil.cpu_percent(interval=1), psutil.virtual_memory().percent, psutil.disk_usage('/').percent
    def create_bar(p, l=12): return f"[{'тЦИ' * int(l * p / 100)}{'тЦС' * (l - int(l * p / 100))}] {p:.1f}%"
    health_report = f"""ЁЯй║ <b>рж╕рж╛рж░рзНржнрж╛рж░ ржПрж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржЪрзЗржХржЖржк ЁЯлж</b>

<pre>тХнтФА ржЖржорж╛рж░ ржирж╛ржБрзЬрж┐-ржнрзБржБрзЬрж┐рж░ ржмрзНржпржмрж╣рж╛рж░
тФВ  CPU : {create_bar(cpu)}
тФВ  RAM : {create_bar(ram)}
тФВ  Disk: {create_bar(disk)}
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>"""
    bot.reply_to(message, health_report)

@bot.message_handler(regexp="^(ЁЯУЛ рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕|/status)$")
def show_service_status(message):
    services = ["ssh", "dropbear", "nginx", "xray", "openvpn", "stunnel4", "trojan-go"]
    status_report = "<b>ЁЯУЛ ржЪрж▓ржорж╛ржи рж╕рж╛рж░рзНржнрж┐рж╕рж╕ржорзВрж╣рзЗрж░ ржЕржмрж╕рзНржерж╛</b>\n\n<pre>тХнтФА рж╕рж╛рж░рзНржнрж┐рж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕"
    for service in services:
        try:
            is_active = subprocess.run(['systemctl', 'is-active', '--quiet', service]).returncode == 0
            status_icon = "тЬЕ" if is_active else "тЭМ"
            status_report += f"\nтФВ  {status_icon} {service:<12}"
        except FileNotFoundError:
             status_report += f"\nтФВ  тЭУ {service:<12}"
    status_report += "\nтХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>"
    bot.reply_to(message, status_report)

@bot.message_handler(regexp="^(ЁЯУЬ ржирж┐рзЯржорж╛ржмрж▓рзА|/rules)$")
def send_rules(message):
    rules_text = """ЁЯУЬ <b>рж╕рж╛рж░рзНржнрж╛рж░ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА</b>

<pre>тХнтФА General Rules
тФВ  1. ржЯрж░рзЗржирзНржЯ ржмрж╛ ржЕрждрж┐рж░рж┐ржХрзНржд ржбрж╛ржЙржирж▓рзЛржб ржирж┐рж╖рж┐ржжрзНржз,
тФВ     ржХржо ржХржо ржбрж╛ржЙржирж▓рзЛржб ржжрзЗржУрзЯрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛\n ржХрж░ржмрзЗржи рж╕ржмрж╛ржЗред
тФВ
тФВ  2. ржПржХ ржПржХрж╛ржЙржирзНржЯ ржПржХрж╛ржзрж┐ржХ ржбрж┐ржнрж╛ржЗрж╕рзЗ,
тФВ     ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржПржХрж╛ржЙржирзНржЯ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣ржмрзЗред
тФВ
тФВ  3. ржХрзЛржирзЛ ржзрж░ржирзЗрж░ ржЕржмрзИржз рззрзо+ рж╕рж╛ржЗржЯ ржПржмржВ
тФВ     ржбрж╛рж░рзНржХ ржУрзЯрзЗржм ржнрж┐ржЬрж┐ржЯ ржирж┐рж╖рж┐ржжрзНржз ржПржЧрзБрж▓рж╛рж░ ржЬржирзНржп,
тФВ     VPS ржмрзНржпрж╛ржи рж╣рждрзЗ ржкрж╛рж░рзЗ ред
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>
<b>ЁЯдЦ Bot by : @JubairFF</b>"""
    bot.reply_to(message, rules_text)

@bot.message_handler(regexp="^(ЁЯФМ ржкрзЛрж░рзНржЯрж╕|/ports)$")
def send_ports_info(message):
    ports_text = """ЁЯФМ <b>PORT INFORMATION</b>

<pre>тХнтФА Connection Ports
тФВ тАв SSH        : 22, 443, 80
тФВ тАв Dropbear   : 443, 109, 143
тФВ тАв Websocket  : 80, 443
тФВ тАв OpenVPN    : 443, 1194, 2200
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>
<pre>тХнтФА Core Service Ports
тФВ тАв Nginx      : 80, 81, 443
тФВ тАв Haproxy    : 80, 443
тФВ тАв DNS        : 53, 443
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>
<pre>тХнтФА XRAY Protocol Ports
тФВ тАв Vmess      : 80, 443
тФВ тАв Vless      : 80, 443
тФВ тАв Trojan     : 443
тФВ тАв Shadowsocks: 443
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА</pre>
<b>ЁЯдЦ Bot by : @JubairFF</b>"""
    bot.reply_to(message, ports_text)

# ============== ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ==============
@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    if message.chat.id == GROUP_ID:
        for user in message.new_chat_members:
            bot.send_message(GROUP_ID, f"<b>ЁЯЦд рж╕рзНржмрж╛ржЧрждржо,</b><i> {user.full_name}!</i>ЁЯе░\nржЖржорж╛ржжрзЗрж░ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо рж╕рж╛рж░рзНржнрж┐рж╕ ржП ржЬрзЯрзЗржи ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржзржирзНржпржмрж╛ржж ЁЯТЪ \nржЖржкржирж╛рж░ ржЬржирзНржп ржЙржкржпрзЛржЧрзА ржХржорж╛ржирзНржб \nржжрзЗржЦрждрзЗ <code>/help</code> ржХрж╛ржоржирзНржб ржжрж┐ржи ЁЯзп\n рж╕рж╛рж░рзНржнрж╛рж░ рж░рзБрж▓рж╕ ржжрзЗржЦрждрзЗ <code>/rules</code> ржХржорж╛ржирзНржб ржжрж┐ржи ЁЯзКред")

# ============== ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ==============
@bot.message_handler(commands=['save', 'listcmd', 'delcmd', 'reboot', 'run', 'mentionall'])
@admin_required
def handle_admin_commands(message):
    command, *args_list = message.text.split(maxsplit=1)
    args = args_list[0] if args_list else ""

    # ржХржиржЯрзЗржирзНржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ
    if command == '/save':
        if not message.reply_to_message:
            return bot.reply_to(message, "тЭМ ржПржХржЯрж┐ ржлрж╛ржЗрж▓рзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзЗ ржХржорж╛ржирзНржбржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")
        command_name = args.split()[0] if args else ""
        if not command_name: return bot.reply_to(message, "<b>ржмрзНржпржмрж╣рж╛рж░:</b> <code>/save [ржирж╛ржо]</code>")

        reply = message.reply_to_message
        file_id, file_type = (reply.video.file_id, 'video') if reply.video else \
                             (reply.document.file_id, 'document') if reply.document else \
                             (reply.photo[-1].file_id, 'photo') if reply.photo else (None, None)

        if not file_id: return bot.reply_to(message, "тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ ржнрж┐ржбрж┐ржУ, ржбржХрзБржорзЗржирзНржЯ ржмрж╛ ржлржЯрзЛ рж╕рзЗржн ржХрж░рж╛ ржпрж╛ржмрзЗред")

        save_command(command_name, file_id, reply.caption or "", file_type)
        bot.reply_to(message, f"тЬЕ `/{command_name}` ржХржорж╛ржирзНржбржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕рзЗржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    elif command == '/listcmd':
        commands = get_all_commands()
        if not commands: return bot.reply_to(message, "ЁЯУВ ржХрзЛржирзЛ ржХржорж╛ржирзНржб рж╕рзЗржн ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред")
        cmd_list = "<b>ЁЯУВ рж╕ржВрж░ржХрзНрж╖рж┐ржд ржХржорж╛ржирзНржб:</b>\n\n" + "\n".join([f"тАв `/{cmd[0]}`" for cmd in commands])
        bot.reply_to(message, cmd_list)

    elif command == '/delcmd':
        if not args: return bot.reply_to(message, "<b>ржмрзНржпржмрж╣рж╛рж░:</b> <code>/delcmd [ржирж╛ржо]</code>")
        command_name = args.split()[0]
        if get_command(command_name):
            delete_command_from_db(command_name)
            bot.reply_to(message, f"тЬЕ `/{command_name}` ржХржорж╛ржирзНржбржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        else: bot.reply_to(message, "тЭМ ржЖржкрж╛рждржд ржПржЗ ржирж╛ржорзЗ ржХрзЛржирзЛ ржХржорж╛ржирзНржб ржирзЗржЗред")

    # рж╕рж╛рж░рзНржнрж╛рж░ ржУ ржЧрзНрж░рзБржк ржЯрзБрж▓рж╕
    elif command == '/reboot':
        bot.reply_to(message, "ЁЯдФ ржЖржкржирж┐ ржХрж┐ рж╕рждрзНржпрж┐ржЗ рж╕рж╛рж░рзНржнрж╛рж░ржЯрж┐ рж░рж┐ржмрзБржЯ ржХрж░рждрзЗ ржЪрж╛ржи?", reply_markup=confirm_reboot_keyboard())

    elif command == '/mentionall':
        if message.chat.id != GROUP_ID: return bot.reply_to(message, "ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржЧрзНрж░рзБржкрзЗ ржХрж╛ржЬ ржХрж░ржмрзЗред")
        if not args: return bot.reply_to(message, "<b>ржмрзНржпржмрж╣рж╛рж░:</b> <code>/mentionall [ржмрж╛рж░рзНрждрж╛]</code>")
        bot.send_message(GROUP_ID, f"ЁЯУг <b><u>рж╕ржХрж▓рзЗрж░ ржЬржирзНржп ржмрж┐ржЬрзНржЮржкрзНрждрж┐!</u></b> ЁЯУг\n\n{args}")

    elif command == '/run':
        if not args: return bot.reply_to(message, "<b>ржмрзНржпржмрж╣рж╛рж░:</b> <code>/run [ржХржорж╛ржирзНржб]</code>")
        msg = bot.reply_to(message, f"тП│ ржХржорж╛ржирзНржб ржЪрж▓ржЫрзЗ...\n<pre>{args}</pre>")
        try:
            res = subprocess.run(args, shell=True, capture_output=True, text=True, timeout=120)
            output = (res.stdout + res.stderr).strip() or "тЬЕ рж╕ржлрж▓, ржХрзЛржирзЛ ржЖржЙржЯржкрзБржЯ ржирзЗржЗред"
            if len(output) > 4096:
                with open("output.txt", "w") as f: f.write(output)
                with open("output.txt", "rb") as f: bot.send_document(message.chat.id, f, caption="ржХржорж╛ржирзНржб ржЖржЙржЯржкрзБржЯ")
                os.remove("output.txt"); bot.delete_message(msg.chat.id, msg.message_id)
            else: bot.edit_message_text(f"<b>ржЖржкржирж╛рж░ ржХржорж╛ржирзНржб ржПрж░ ржлрж▓рж╛ржлрж▓ ЁЯдЯ:</b>\n<pre>{output}</pre>", msg.chat.id, msg.message_id)
        except Exception as e: bot.edit_message_text(f"тЭМ ржХржорж╛ржирзНржб ржмрзНржпрж░рзНрже: {e}", msg.chat.id, msg.message_id)

# ============== ржХрж▓ржмрзНржпрж╛ржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (рж░рж┐ржмрзБржЯ ржХржиржлрж╛рж░рзНржорзЗрж╢ржирзЗрж░ ржЬржирзНржп) ==============
@bot.callback_query_handler(func=lambda call: True)
@admin_required
def handle_callback_query(call):
    action = call.data
    msg = call.message

    if action == "confirm_reboot":
        try:
            bot.edit_message_text("тЬЕ рж░рж┐ржмрзБржЯ ржХржорж╛ржирзНржб ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред \nтЪая╕П рж╕рж╛рж░рзНржнрж╛рж░ ржХрж┐ржЫрзБржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржЕржлрж▓рж╛ржЗржи рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред", msg.chat.id, msg.message_id, reply_markup=None)
            subprocess.run(['sudo', 'reboot'], check=True)
        except Exception as e:
            bot.edit_message_text(f"тЭМ рж░рж┐ржмрзБржЯ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ: <code>{e}</code>", msg.chat.id, msg.message_id)

    elif action == "cancel_action":
        bot.edit_message_text("ЁЯСН ржХрж╛ржЬржЯрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", msg.chat.id, msg.message_id, reply_markup=None)

    bot.answer_callback_query(call.id)


# ============== ржХрж╛рж╕рзНржЯржо ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржбрж╛ржЗржирж╛ржорж┐ржХ) ==============
@bot.message_handler(func=lambda message: message.text and message.text.startswith('/'))
def handle_custom_commands(message):
    command_name = message.text[1:].lower().split()[0]
    command_data = get_command(command_name)

    if command_data:
        file_id, caption, file_type = command_data
        try:
            sender_map = {'video': bot.send_video, 'document': bot.send_document, 'photo': bot.send_photo}
            sender_map[file_type](message.chat.id, file_id, caption=caption)
        except Exception as e:
            bot.reply_to(message, f"тЭМ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛: <code>{e}</code>")

# ============== рж╕рзНржЯрж╛рж░рзНржЯржЖржк ==============
if __name__ == '__main__':
    print("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    init_db()
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, "тЬЕ ржмржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗред", disable_notification=True)
        except Exception as e:
            print(f"ржЕрзНржпрж╛ржбржорж┐ржи {admin_id} ржХрзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже: {e}")
    print("Bot is running...")
    bot.infinity_polling(timeout=90, long_polling_timeout=60, allowed_updates=['message', 'callback_query', 'new_chat_members'])
